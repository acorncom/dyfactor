#!/usr/bin/env node
'use strict';

const { Runner, Environment } = require('../dist/commonjs/src');
const program = require('commander');

let env = Environment.create();
let { types, plugins } = env;

function levelDescription() {
  return plugins
    .map(desc => {
      return `name: ${desc.name} lev: ${desc.modes.join(', ')}`;
    })
    .join('');
}

function verifyPluginLevel(plugin, level) {
  let currentPlugin = plugins.find(p => p.name === plugin);

  if (!currentPlugin) {
    console.log(`Plugin "${plugin}" was not found`);
    process.exit(1);
  }

  if (!currentPlugin.modes.includes(level)) {
    console.log(
      `Plugin "${plugin}" only takes ${currentPlugin.modes.join(', ')}. "${level}" was passed.`
    );
    process.exit(1);
  }

  return level;
}

program
  .option('-l, --level <level>', `analyze, export-data, modify`)
  .action(async (type, plugin, path, options) => {
    let level;
    if (options.level) {
      level = verifyPluginLevel(plugin, options.level);
    }

    let runner = new Runner(env);

    await runner.run(type, plugin, path, level);
  })
  .parse(process.argv);
