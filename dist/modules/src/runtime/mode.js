import * as fs from 'fs';
import { prompt } from 'inquirer';
import * as ora from 'ora';
import { launch } from 'puppeteer';
export function modeFactory(mode, env, plugin) {
    switch (mode) {
        case 0 /* analyze */:
            return new AnalyzeMode(env, plugin);
        case 1 /* data */:
            return new DataMode(env, plugin);
        case 3 /* havoc */:
            return new HavocMode(env, plugin);
    }
    throw new Error(`Mode not found`);
}
export class BaseMode {
    constructor(env, plugin) {
        this.env = env;
        this.plugin = plugin;
    }
    analyze() { return; }
    apply(_meta) { return; }
    prepare() {
        return Promise.resolve();
    }
    run() {
        return Promise.resolve({ data: [] });
    }
}
export class AnalyzeMode extends BaseMode {
    analyze() {
        let spinner = ora('Appling CodeMods ...').start();
        this.plugin.analyze();
        spinner.succeed('Applied CodeMods');
    }
}
export class DataMode extends BaseMode {
    constructor() {
        super(...arguments);
        this.workingBranch = '';
    }
    async prepare() {
        let { env } = this;
        let spinner = this.spinner = ora('Applying instrumentation ...').start();
        this.workingBranch = await env.currentBranch();
        await env.scratchBranch('refactor');
        this.plugin.prepare();
        this.spinner = spinner.succeed('Applied instrumentation');
    }
    async run() {
        let { spinner, env } = this;
        spinner.start('Starting build ...');
        await env.build();
        spinner = spinner.succeed('Build complete');
        await prompt([{
                type: 'confirm',
                name: 'confirmed',
                message: 'Please start your dev server. When your server is up please continue.'
            }]);
        spinner = spinner.succeed(`Server is running`);
        let browser = await launch({ headless: false, slowMo: 250 });
        let page = await browser.newPage();
        let meta = { data: [] };
        page.on('console', msg => {
            let json = msg.text();
            if (!json.includes('DEBUG:')) {
                meta.data.push(json);
            }
        });
        let navigationOptions = env.navigation.options ? env.navigation.options : {};
        for (let url of env.navigation.urls) {
            spinner.start(`Visiting ${url} ...`);
            await page.goto(url, navigationOptions);
            spinner = spinner.succeed(`Visited ${url}`);
        }
        await browser.close();
        await env.commit();
        await env.checkoutBranch(this.workingBranch);
        await env.deleteScratchBranch();
        return meta;
    }
    apply(meta) {
        fs.writeFileSync('dyfactor-metadata.json', JSON.stringify(meta));
    }
}
export class HavocMode extends DataMode {
    apply(meta) {
        this.plugin.applyMeta(meta);
    }
}
//# sourceMappingURL=data:application/json;base64,